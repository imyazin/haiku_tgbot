import os
import logging
import asyncio
import threading
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

from training import HaikuGenerator
from dataset import get_haiku_dataset

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class HaikuTelegramBot:
    def __init__(self, token):
        self.token = token
        self.generator = HaikuGenerator()
        self.model_loaded = False
        self.training_in_progress = False
        self.application = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
        self.stats = {
            'total_requests': 0,
            'successful_generations': 0,
            'failed_generations': 0,
            'users': set()
        }
    
    async def load_or_train_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
            if os.path.exists("haiku_model.h5") and os.path.exists("tokenizer.pkl"):
                logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏...")
                self.generator.load_model()
                self.model_loaded = True
                logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            else:
                logger.info("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
                await self.train_model()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            await self.train_model()
    
    async def train_model(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        self.training_in_progress = True
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ...")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
            haiku_data = get_haiku_dataset()
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(haiku_data)} —Ö–æ–∫–∫—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            
            # –û–±—É—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def train_in_thread():
                self.generator.train(haiku_data, epochs=150, batch_size=16)
                self.generator.save_model()
                self.model_loaded = True
                self.training_in_progress = False
                logger.info("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            
            # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            training_thread = threading.Thread(target=train_in_thread)
            training_thread.start()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
            max_wait_time = 3600  # 1 —á–∞—Å –º–∞–∫—Å–∏–º—É–º
            wait_time = 0
            while self.training_in_progress and wait_time < max_wait_time:
                await asyncio.sleep(10)
                wait_time += 10
                if wait_time % 60 == 0:  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    logger.info(f"–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è... ({wait_time//60} –º–∏–Ω)")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
            self.training_in_progress = False
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        self.stats['users'].add(user_id)
        
        welcome_text = """
üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–æ–∫–∫—É! üå∏

–Ø —É–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ —è–ø–æ–Ω—Å–∫–∏–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–π –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ.

üìù –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ö–æ–∫–∫—É
‚Ä¢ –Ø –ø—Ä–∏–¥—É–º–∞—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ

üéØ –ö–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å
/example - –ø—Ä–∏–º–µ—Ä—ã —Ö–æ–∫–∫—É
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/retrain - –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)

üí° –°–æ–≤–µ—Ç: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 —Å–ª–æ–≥–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!
        """
        
        keyboard = [
            [InlineKeyboardButton("üìñ –ü—Ä–∏–º–µ—Ä—ã", callback_data="examples")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö –ü–û–î–†–û–ë–ù–ê–Ø –ü–û–ú–û–©–¨

üéã –ß—Ç–æ —Ç–∞–∫–æ–µ —Ö–æ–∫–∫—É?
–•–æ–∫–∫—É - —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ —è–ø–æ–Ω—Å–∫–æ–π –ø–æ—ç–∑–∏–∏ –∏–∑ 3 —Å—Ç—Ä–æ–∫:
‚Ä¢ 1-—è —Å—Ç—Ä–æ–∫–∞: 5 —Å–ª–æ–≥–æ–≤
‚Ä¢ 2-—è —Å—Ç—Ä–æ–∫–∞: 7 —Å–ª–æ–≥–æ–≤  
‚Ä¢ 3-—è —Å—Ç—Ä–æ–∫–∞: 5 —Å–ª–æ–≥–æ–≤

üñãÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:
1. –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ 5 —Å–ª–æ–≥–æ–≤)
2. –ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
3. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø–æ–ª—É—á–∏–≤—à–∏–º—Å—è —Ö–æ–∫–∫—É!

‚ú® –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫:
‚Ä¢ "–£—Ç—Ä–µ–Ω–Ω–∏–π —Ç—É–º–∞–Ω" (5 —Å–ª–æ–≥–æ–≤)
‚Ä¢ "–í–µ—Å–µ–Ω–Ω–∏–π –¥–æ–∂–¥–∏–∫ –ª—å–µ—Ç" (6 —Å–ª–æ–≥–æ–≤)
‚Ä¢ "–û—Å–µ–Ω–Ω–∏–µ –ª–∏—Å—Ç—å—è" (6 —Å–ª–æ–≥–æ–≤)

üé® –¢–µ–º—ã –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è:
‚Ä¢ –ü—Ä–∏—Ä–æ–¥–∞ –∏ –≤—Ä–µ–º–µ–Ω–∞ –≥–æ–¥–∞
‚Ä¢ –ñ–∏–≤–æ—Ç–Ω—ã–µ –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ –ß—É–≤—Å—Ç–≤–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
‚Ä¢ –ì–æ—Ä–æ–¥—Å–∫–∞—è –∂–∏–∑–Ω—å
‚Ä¢ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è

‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ 150+ —Ä—É—Å—Å–∫–∏—Ö —Ö–æ–∫–∫—É
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å LSTM
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 1-3 —Å–µ–∫—É–Ω–¥—ã
        """
        
        await update.message.reply_text(help_text)
    
    async def example_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ö–æ–∫–∫—É"""
        examples = [
            ("–£—Ç—Ä–µ–Ω–Ω–∏–π —Ç—É–º–∞–Ω", "–°—Ç–µ–ª–µ—Ç—Å—è –Ω–∞–¥ —Ä–µ–∫–æ–π\n–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–º –ø–æ–∫—Ä–æ–≤–æ–º"),
            ("–í–µ—Å–µ–Ω–Ω–∏–π –¥–æ–∂–¥–∏–∫ –ª—å–µ—Ç", "–ü–æ –ª–∏—Å—Ç—å—è–º —Ç–∏—Ö–æ –±—å–µ—Ç\n–ó–µ–º–ª—è –±–ª–∞–≥–æ—É—Ö–∞–µ—Ç"),
            ("–û—Å–µ–Ω–Ω–∏–µ –ª–∏—Å—Ç—å—è", "–ö—Ä—É–∂–∞—Ç—Å—è –≤ –≤–∏—Ö—Ä–µ –≤–µ—Ç—Ä–∞\n–ó–æ–ª–æ—Ç–æ–π –∫–æ–≤–µ—Ä"),
            ("–ü–µ—Ä–≤—ã–π —Å–Ω–µ–≥ —É–ø–∞–ª", "–ù–∞ –≥–æ–ª—ã–µ –≤–µ—Ç–≤–∏\n–ú–∏—Ä —Å—Ç–∞–ª –±–µ–ª–æ—Å–Ω–µ–∂–Ω—ã–º"),
            ("–õ–µ—Ç–Ω–∏–π –∑–Ω–æ–π –ø–∞–ª–∏—Ç", "–¶–∏–∫–∞–¥—ã –ø–µ—Å–Ω–∏ –ø–æ—é—Ç\n–í —Ç–µ–Ω–∏ –ø—Ä–æ—Ö–ª–∞–¥–∞")
        ]
        
        example_text = "üìñ –ü–†–ò–ú–ï–†–´ –•–û–ö–ö–£:\n\n"
        for i, (first_line, continuation) in enumerate(examples, 1):
            example_text += f"{i}. {first_line}\n{continuation}\n\n"
        
        example_text += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É!"
        
        keyboard = [
            [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞", callback_data="random_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(example_text, reply_markup=reply_markup)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.stats['users'])}
üìù –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['total_requests']}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {self.stats['successful_generations']}
‚ùå –û—à–∏–±–æ–∫: {self.stats['failed_generations']}
üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(self.stats['successful_generations']/max(1,self.stats['total_requests'])*100):.1f}%

ü§ñ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞' if self.model_loaded else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}
üèãÔ∏è –û–±—É—á–µ–Ω–∏–µ: {'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ' if self.training_in_progress else '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ'}

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now().strftime('%H:%M:%S')}
        """
        
        await update.message.reply_text(stats_text)
    
    async def generate_haiku(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–æ–∫–∫—É –ø–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ"""
        if not self.model_loaded:
            if self.training_in_progress:
                await update.message.reply_text(
                    "ü§ñ –ú–æ–¥–µ–ª—å –µ—â–µ –æ–±—É—á–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n"
                    "‚è±Ô∏è –û–±—É—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            return
        
        first_line = update.message.text.strip()
        user_id = update.effective_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['users'].add(user_id)
        self.stats['total_requests'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
        if len(first_line) > 100:
            await update.message.reply_text(
                "‚ùå –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –ø–æ–∫–æ—Ä–æ—á–µ."
            )
            return
        
        if len(first_line) < 3:
            await update.message.reply_text(
                "‚ùå –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤."
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–æ–∫–∫—É
            completion = self.generator.generate_haiku_completion(
                first_line, 
                max_length=15, 
                temperature=0.8
            )
            
            if completion and completion.strip():
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                haiku_text = f"üå∏ **–í–∞—à–µ —Ö–æ–∫–∫—É:**\n\n"
                haiku_text += f"*{first_line}*\n"
                haiku_text += f"{completion}\n\n"
                haiku_text += "‚ú® *–°–æ–∑–¥–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é*"
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                keyboard = [
                    [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data=f"regenerate:{first_line}")],
                    [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save:{first_line}:{completion}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    haiku_text, 
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
                self.stats['successful_generations'] += 1
            else:
                await update.message.reply_text(
                    "üòÖ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö–æ–∫–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É."
                )
                self.stats['failed_generations'] += 1
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–æ–∫–∫—É: {e}")
            await update.message.reply_text(
                "üòµ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö–æ–∫–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            self.stats['failed_generations'] += 1
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "examples":
            await self.example_command(update, context)
        elif query.data == "help":
            await self.help_command(update, context)
        elif query.data == "stats":
            await self.stats_command(update, context)
        elif query.data == "random_start":
            random_starts = [
                "–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–æ—Å–∞", "–í–µ—á–µ—Ä–Ω–∏–π –∑–∞–∫–∞—Ç", "–ó–∏–º–Ω–∏–π –≤–µ—Ç–µ—Ä",
                "–õ–µ—Ç–Ω–∏–π –¥–æ–∂–¥—å", "–û—Å–µ–Ω–Ω–∏–π –ª–∏—Å—Ç", "–í–µ—Å–µ–Ω–Ω–∏–π —Ü–≤–µ—Ç–æ–∫",
                "–ì–æ—Ä–Ω–∞—è —Ç—Ä–æ–ø–∞", "–ú–æ—Ä—Å–∫–∏–µ –≤–æ–ª–Ω—ã", "–õ–µ—Å–Ω–∞—è —Ç–∏—à—å",
                "–ì–æ—Ä–æ–¥—Å–∫–æ–π —à—É–º", "–î–µ—Ç—Å–∫–∏–π —Å–º–µ—Ö", "–°—Ç–∞—Ä—ã–π –¥–æ–º"
            ]
            import random
            random_start = random.choice(random_starts)
            await query.message.reply_text(
                f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: **{random_start}**\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–æ–∫–∫—É!",
                parse_mode='Markdown'
            )
        elif query.data.startswith("regenerate:"):
            first_line = query.data.split(":", 1)[1]
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            class FakeMessage:
                def __init__(self, text):
                    self.text = text
                    
            fake_update = Update(
                update_id=update.update_id,
                message=FakeMessage(first_line),
                effective_user=update.effective_user,
                effective_chat=update.effective_chat
            )
            await self.generate_haiku(fake_update, context)
        elif query.data.startswith("save:"):
            parts = query.data.split(":", 2)
            if len(parts) == 3:
                first_line, completion = parts[1], parts[2]
                saved_haiku = f"{first_line}\n{completion}"
                await query.message.reply_text(
                    f"üíæ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ö–æ–∫–∫—É:**\n\n{saved_haiku}\n\n"
                    f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!",
                    parse_mode='Markdown'
                )
    
    async def retrain_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞
        admin_ids = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        
        if update.effective_user.id not in admin_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if self.training_in_progress:
            await update.message.reply_text("üîÑ –û–±—É—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
            return
        
        await update.message.reply_text("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        await self.train_model()
        await update.message.reply_text("‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞!")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("example", self.example_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("retrain", self.retrain_command))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.generate_haiku))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        async def post_init(application):
            await self.load_or_train_model()
        
        self.application.post_init = post_init
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–æ–∫–∫—É...")
        self.application.run_polling()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é:")
        print("export TELEGRAM_BOT_TOKEN='your_token_here'")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = HaikuTelegramBot(TOKEN)
    bot.run()

if __name__ == "__main__":
    main()